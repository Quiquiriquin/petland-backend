/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreatePreUserInput: { // input type
    email: string; // String!
    howManyDogs?: number | null; // Int
    phone: string; // String!
  }
  CreateUserInput: { // input type
    email: string; // String!
    password: string; // String!
    role?: NexusGenEnums['Role'] | null; // Role
  }
  FindEmailInput: { // input type
    email: string; // String!
  }
  UpdateUserInput: { // input type
    clientOfId?: number | null; // Int
    companyId?: number | null; // Int
    email?: string | null; // String
    gender?: NexusGenEnums['Gender'] | null; // Gender
    lastname?: string | null; // String
    name?: string | null; // String
    password?: string | null; // String
    phone?: string | null; // String
  }
}

export interface NexusGenEnums {
  Gender: "Female" | "Male" | "Other"
  Role: "ADMIN" | "CLIENT" | "OWNER" | "USER"
  Size: "LARGE" | "MEDIUM" | "SMALL"
  UserStatus: "ACTIVE" | "BLOCKED" | "DELETED" | "INACTIVE" | "INCOMPLETE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Address: { // root type
    city?: string | null; // String
    companyId?: number | null; // Int
    state?: string | null; // String
    streetOne?: string | null; // String
    streetTwo?: string | null; // String
    town?: string | null; // String
    zipCode?: string | null; // String
  }
  AuthResponse: { // root type
    accessToken?: string | null; // String
    refreshToken?: string | null; // String
  }
  Company: { // root type
    addressId?: number | null; // Int
    id?: string | null; // ID
    name: string; // String!
    ownerId: number; // Int!
    phone: string; // String!
  }
  Dog: { // root type
    age: number; // Int!
    breed: string; // String!
    id?: string | null; // ID
    imageUrl?: string | null; // String
    name: string; // String!
    notes?: string | null; // String
    ownerId: number; // Int!
    size?: NexusGenEnums['Size'] | null; // Size
  }
  Mutation: {};
  PreUser: { // root type
    email: string; // String!
    howManyDogs?: number | null; // Int
    id?: string | null; // ID
    phone?: string | null; // String
  }
  Query: {};
  User: { // root type
    clientOfId?: number | null; // Int
    companyId?: number | null; // Int
    email: string; // String!
    gender?: NexusGenEnums['Gender'] | null; // Gender
    howManyDogs?: number | null; // Int
    id?: string | null; // ID
    lastname?: string | null; // String
    name?: string | null; // String
    password: string; // String!
    phone?: string | null; // String
    role?: NexusGenEnums['Role'] | null; // Role
    status?: NexusGenEnums['UserStatus'] | null; // UserStatus
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Address: { // field return type
    city: string | null; // String
    company: NexusGenRootTypes['Company'] | null; // Company
    companyId: number | null; // Int
    state: string | null; // String
    streetOne: string | null; // String
    streetTwo: string | null; // String
    town: string | null; // String
    zipCode: string | null; // String
  }
  AuthResponse: { // field return type
    accessToken: string | null; // String
    refreshToken: string | null; // String
  }
  Company: { // field return type
    address: NexusGenRootTypes['Address'] | null; // Address
    addressId: number | null; // Int
    clients: NexusGenRootTypes['User'] | null; // User
    employees: NexusGenRootTypes['User'] | null; // User
    id: string | null; // ID
    name: string; // String!
    owner: NexusGenRootTypes['User'] | null; // User
    ownerId: number; // Int!
    phone: string; // String!
  }
  Dog: { // field return type
    age: number; // Int!
    breed: string; // String!
    id: string | null; // ID
    imageUrl: string | null; // String
    name: string; // String!
    notes: string | null; // String
    owner: NexusGenRootTypes['User'] | null; // User
    ownerId: number; // Int!
    size: NexusGenEnums['Size'] | null; // Size
  }
  Mutation: { // field return type
    addDogToUser: NexusGenRootTypes['User'] | null; // User
    createDog: NexusGenRootTypes['Dog'] | null; // Dog
    createPreUser: NexusGenRootTypes['PreUser'] | null; // PreUser
    createUser: NexusGenRootTypes['User'] | null; // User
    signUser: NexusGenRootTypes['AuthResponse'] | null; // AuthResponse
    updateUser: NexusGenRootTypes['User'] | null; // User
    verifyIfEmailExists: NexusGenRootTypes['User'] | null; // User
  }
  PreUser: { // field return type
    email: string; // String!
    howManyDogs: number | null; // Int
    id: string | null; // ID
    phone: string | null; // String
  }
  Query: { // field return type
    companyDogs: Array<NexusGenRootTypes['Dog'] | null> | null; // [Dog]
    dogById: NexusGenRootTypes['Dog'] | null; // Dog
    dogs: Array<NexusGenRootTypes['Dog'] | null> | null; // [Dog]
    user: NexusGenRootTypes['User'] | null; // User
    userDogs: Array<NexusGenRootTypes['Dog'] | null> | null; // [Dog]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    clientOf: NexusGenRootTypes['Company'] | null; // Company
    clientOfId: number | null; // Int
    company: NexusGenRootTypes['Company'] | null; // Company
    companyId: number | null; // Int
    dogs: NexusGenRootTypes['Dog'] | null; // Dog
    email: string; // String!
    gender: NexusGenEnums['Gender'] | null; // Gender
    howManyDogs: number | null; // Int
    id: string | null; // ID
    lastname: string | null; // String
    name: string | null; // String
    ownedCompany: NexusGenRootTypes['Company'] | null; // Company
    password: string; // String!
    phone: string | null; // String
    role: NexusGenEnums['Role'] | null; // Role
    status: NexusGenEnums['UserStatus'] | null; // UserStatus
  }
}

export interface NexusGenFieldTypeNames {
  Address: { // field return type name
    city: 'String'
    company: 'Company'
    companyId: 'Int'
    state: 'String'
    streetOne: 'String'
    streetTwo: 'String'
    town: 'String'
    zipCode: 'String'
  }
  AuthResponse: { // field return type name
    accessToken: 'String'
    refreshToken: 'String'
  }
  Company: { // field return type name
    address: 'Address'
    addressId: 'Int'
    clients: 'User'
    employees: 'User'
    id: 'ID'
    name: 'String'
    owner: 'User'
    ownerId: 'Int'
    phone: 'String'
  }
  Dog: { // field return type name
    age: 'Int'
    breed: 'String'
    id: 'ID'
    imageUrl: 'String'
    name: 'String'
    notes: 'String'
    owner: 'User'
    ownerId: 'Int'
    size: 'Size'
  }
  Mutation: { // field return type name
    addDogToUser: 'User'
    createDog: 'Dog'
    createPreUser: 'PreUser'
    createUser: 'User'
    signUser: 'AuthResponse'
    updateUser: 'User'
    verifyIfEmailExists: 'User'
  }
  PreUser: { // field return type name
    email: 'String'
    howManyDogs: 'Int'
    id: 'ID'
    phone: 'String'
  }
  Query: { // field return type name
    companyDogs: 'Dog'
    dogById: 'Dog'
    dogs: 'Dog'
    user: 'User'
    userDogs: 'Dog'
    users: 'User'
  }
  User: { // field return type name
    clientOf: 'Company'
    clientOfId: 'Int'
    company: 'Company'
    companyId: 'Int'
    dogs: 'Dog'
    email: 'String'
    gender: 'Gender'
    howManyDogs: 'Int'
    id: 'ID'
    lastname: 'String'
    name: 'String'
    ownedCompany: 'Company'
    password: 'String'
    phone: 'String'
    role: 'Role'
    status: 'UserStatus'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addDogToUser: { // args
      dogId?: number | null; // Int
      userId?: number | null; // Int
    }
    createDog: { // args
      age?: number | null; // Int
      breed?: string | null; // String
      name?: string | null; // String
      ownerId?: number | null; // Int
      size?: NexusGenEnums['Size'] | null; // Size
    }
    createPreUser: { // args
      input?: NexusGenInputs['CreatePreUserInput'] | null; // CreatePreUserInput
    }
    createUser: { // args
      input?: NexusGenInputs['CreateUserInput'] | null; // CreateUserInput
    }
    signUser: { // args
      input?: NexusGenInputs['CreateUserInput'] | null; // CreateUserInput
    }
    updateUser: { // args
      input?: NexusGenInputs['UpdateUserInput'] | null; // UpdateUserInput
    }
    verifyIfEmailExists: { // args
      input?: NexusGenInputs['FindEmailInput'] | null; // FindEmailInput
    }
  }
  Query: {
    companyDogs: { // args
      companyId?: number | null; // Int
      search?: string | null; // String
    }
    dogById: { // args
      id?: number | null; // Int
    }
    dogs: { // args
      id?: number | null; // Int
    }
    userDogs: { // args
      userId?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}