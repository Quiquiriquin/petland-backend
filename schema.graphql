### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  """City of the address"""
  city: String
  company: Company
  companyId: Int

  """State of the address"""
  state: String

  """Primary street address"""
  streetOne: String

  """Secondary street address"""
  streetTwo: String

  """Town or locality"""
  town: String

  """Postal code of the address"""
  zipCode: String
}

type AuthResponse {
  accessToken: String
  refreshToken: String
}

type Company {
  address: Address
  addressId: Int
  clients: User
  employees: User
  id: ID
  name: String!
  owner: User
  ownerId: Int!
  phone: String!
}

input CreatePreUserInput {
  email: String!
  howManyDogs: Int
  phone: String!
}

input CreateUserInput {
  email: String!
  password: String!
  role: Role
}

type Dog {
  age: Int!
  breed: String!
  id: ID
  imageUrl: String
  name: String!
  notes: String
  owner: User
  ownerId: Int!
  size: Size
}

input FindEmailInput {
  email: String!
}

"""User gender"""
enum Gender {
  Female
  Male
  Other
}

type Mutation {
  addDogToUser(dogId: Int, userId: Int): User
  createDog(age: Int, breed: String, name: String, ownerId: Int, size: Size): Dog
  createPreUser(input: CreatePreUserInput): PreUser
  createUser(input: CreateUserInput): User
  signUser(input: CreateUserInput): AuthResponse
  updateUser(input: UpdateUserInput): User
  verifyIfEmailExists(input: FindEmailInput): User
}

type PreUser {
  email: String!
  howManyDogs: Int
  id: ID
  phone: String
}

type Query {
  companyDogs(companyId: Int, search: String): [Dog]
  dogById(id: Int): Dog
  dogs(id: Int): [Dog]
  user: User
  userDogs(userId: Int): [Dog]
  users: [User]
}

"""User role"""
enum Role {
  ADMIN
  CLIENT
  OWNER
  USER
}

"""Dog size"""
enum Size {
  LARGE
  MEDIUM
  SMALL
}

input UpdateUserInput {
  clientOfId: Int
  companyId: Int
  email: String
  gender: Gender
  lastname: String
  name: String
  password: String
  phone: String
}

type User {
  clientOf: Company
  clientOfId: Int
  company: Company
  companyId: Int
  dogs: Dog
  email: String!
  gender: Gender
  howManyDogs: Int
  id: ID
  lastname: String
  name: String
  ownedCompany: Company
  password: String!
  phone: String
  role: Role
  status: UserStatus
}

"""User status"""
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
  INACTIVE
  INCOMPLETE
}